import React from 'react';

const objectMerge = require('object-merge');

class S2SNativeBaseComponent extends React.Component {
  constructor(props) {
    super(props);
  }
  getClassName() {
    //console.log('*****', this, this.constructor.name );
    let dName;
    if (typeof(this.displayName) === 'string') {
      dName = this.displayName;
    } else if (typeof(this.displayName) === 'undefined' && this.constructor && typeof(this.constructor.name) === 'string'){
      //console.log('>>>>>>>', this.constructor.name, this );
      dName =this.constructor.name;
    } else {
      console.warn('class missing displayName', typeof(this.displayName), this.displayName, this.constructor, this.constructor && this.constructor.name,  this);
      dName = 'undefined';
    }

    return dName;
  }

  applyThemeStyle(styleName, styles) {
    // NOTE: the 'themes' object is imported (in case you are looking for where
    // it is defined)

    const componentName = this.getClassName().toLowerCase();
    if(this.props.themeStyle && this.props.themeStyle[componentName] && this.props.themeStyle[componentName][styleName]) {
      return( styles.concat(this.props.themeStyle[componentName][styleName]));
      // return( objectMerge( styles, this.props.themeStyle[componentName][styleName]));
    } else{
      if(this.props.themeStyle && this.constructor.filename && this.props.themeStyle[this.constructor.filename] && this.props.themeStyle[this.constructor.filename][styleName]) {
        return( styles.concat(this.props.themeStyle[this.constructor.filename][styleName]));
        // return( objectMerge( styles, this.props.themeStyle[this.constructor.filename][styleName]));
      } else{
        if(this.props.themeStyle && this.constructor.filename && this.props.themeStyle[this.constructor.filename.toLowerCase()] && this.props.themeStyle[this.constructor.filename.toLowerCase()][styleName]) {
          return(styles.concat(this.props.themeStyle[this.constructor.filename.toLowerCase()][styleName]));
          // return( objectMerge( styles, this.props.themeStyle[this.constructor.filename.toLowerCase()][styleName]));
        } else{
          return( styles );
        }
      }
    }
  }

  getCompStyle(styleName, props=this.props) {
    // TA - only return a compStyle object if there is a match with the styleName...otherwise return
    // undefined.

    return props.compStyle && props.compStyle[styleName] ? props.compStyle[styleName] :  undefined;
  }

  getStyle(styleName, props=this.props, state=this.state) {
    // Since react native for web uses registered styles via StyleSheet.create, in
    // order to override registered styles, need to build an array with the registered style
    // (which is a number) and the objects that are to be merged.

    // build initial array
    let styleReturn = [].concat(this.getDefaultStyle(styleName, props, state)); //add object
    //console.log('getStyle default: '+styleName , styleReturn);


    // apply the themed styling
    if(this.props.themeStyle) {
      styleReturn = this.applyThemeStyle(styleName, styleReturn);
    }
    // console.log('getStyle themed: '+styleName, styleReturn);

    // apply style from props
    const compStyle = this.getCompStyle(styleName, props);
    if (compStyle){
      styleReturn = styleReturn.concat(compStyle); //[styleReturn, this.getCompStyle(styleName)];
    }
    //console.log('getStyle returing ... with comp: '+styleName, styleReturn);
    return styleReturn;
  }

  getIntlText(keyName, defaultMsg){
    //console.log('Intl: ', this.getClassName(), keyName);
    let sMessage = defaultMsg;
    if (this.props.intl) {
      const intlMsg = this.props.intl.formatMessage({"id": keyName });
      if (intlMsg != keyName){
        sMessage = intlMsg;
      }
    }

    return sMessage;
  }
}

// jes cannot do this since we have not defined it on all classes yet
//S2SBaseComponent.filename = 's2s-base-class';
export default S2SNativeBaseComponent;
